generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model anuncio {
  id                            Int                             @id @default(autoincrement())
  fotos                         String[]                        @db.VarChar
  titulo                        String?                         @db.VarChar(50)
  hospedes                      Int
  quartos                       Int
  banheiros                     Int
  descricao                     String?                         @db.VarChar(500)
  valor_diaria                  Decimal                         @db.Decimal
  publicado                     Boolean
  data_checkin                  DateTime                        @db.Date
  data_checkout                 DateTime                        @db.Date
  tipo_imovel_atual             tipo_imovel
  tipo_espaco_atual             tipo_espaco
  comodidades_atual             comodidades
  comodidades_especiais_atual   comodidades_especiais
  cameras                       Boolean
  seguranca_atual               seguranca?
  regra_da_casa                 String                          @db.VarChar(100)
  politica_cancelamento         String                          @db.VarChar(100)
  tipo_hospede_atual            tipo_hospede
  tipo_reserva_atual            tipo_reserva
  anfitriao                     Int
  usuario                       usuario                         @relation(fields: [anfitriao], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_anfitriao")
  favoritos                     favoritos[]
  lista_favoritos_personalizada lista_favoritos_personalizada[]
  reserva                       reserva[]
}

model avaliacao {
  id                                              Int       @id @default(autoincrement())
  id_usuario_avaliador                            Int
  id_usuario_avaliado                             Int?
  id_anuncio_avaliado                             Int?
  nota_limpeza                                    Decimal?  @db.Decimal
  nota_exatidao_anuncio                           Decimal?  @db.Decimal
  nota_custo_beneficio                            Decimal?  @db.Decimal
  nota_localizacao                                Decimal?  @db.Decimal
  comentario                                      String    @db.VarChar(255)
  nota_seguiu_regras                              Decimal?  @db.Decimal
  nota_pontualidade                               Decimal?  @db.Decimal
  nota_cordialidade                               Decimal?  @db.Decimal
  criado_em                                       DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  usuario_avaliacao_id_usuario_avaliadoTousuario  usuario?  @relation("avaliacao_id_usuario_avaliadoTousuario", fields: [id_usuario_avaliado], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_avaliado")
  usuario_avaliacao_id_usuario_avaliadorTousuario usuario   @relation("avaliacao_id_usuario_avaliadorTousuario", fields: [id_usuario_avaliador], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_avaliador")
  usuario_usuario_avaliacao_idToavaliacao         usuario[] @relation("usuario_avaliacao_idToavaliacao")
}

model endereco {
  id          Int       @id @default(autoincrement())
  id_usuario  Int?
  id_anuncio  Int?
  cep         String    @db.VarChar(10)
  estado      String    @db.VarChar(2)
  cidade      String    @db.VarChar(50)
  bairro      String    @db.VarChar(50)
  rua         String    @db.VarChar(100)
  numero      String?   @db.VarChar(4)
  complemento String?   @db.VarChar(255)
  latitude    String?   @db.VarChar(50)
  longitude   String?   @db.VarChar(50)
  criado_em   DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  usuario     usuario?  @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario")
}

model favoritos {
  id         Int       @id @default(autoincrement())
  id_usuario Int?
  id_anuncio Int?
  criado_em  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  anuncio    anuncio?  @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_anuncio")
  usuario    usuario?  @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario")
}

model usuario {
  id                                                Int                             @id @default(autoincrement())
  foto                                              String?                         @db.VarChar(255)
  nome                                              String                          @db.VarChar(50)
  nome_completo                                     String?                         @db.VarChar(150)
  email                                             String                          @db.VarChar(100) @unique
  cpf                                               String?                         @db.VarChar(14)
  telefone                                          String?                         @db.VarChar(14)
  admin                                             Boolean?                        @default(false)
  criado_em                                         DateTime?                       @default(dbgenerated("CURRENT_DATE")) @db.Date
  ativo                                             Boolean?                        @default(true)
  url_documento                                     String?                         @db.VarChar(255)
  bloqueado                                         Boolean?                        @default(false)
  token_acesso                                      String                          @db.VarChar(255)
  avaliacao_id                                      Int?
  anuncio                                           anuncio[]
  avaliacao_avaliacao_id_usuario_avaliadoTousuario  avaliacao[]                     @relation("avaliacao_id_usuario_avaliadoTousuario")
  avaliacao_avaliacao_id_usuario_avaliadorTousuario avaliacao[]                     @relation("avaliacao_id_usuario_avaliadorTousuario")
  dados_bancarios                                   dados_bancarios[]
  endereco                                          endereco[]
  favoritos                                         favoritos[]
  lista_favoritos_personalizada                     lista_favoritos_personalizada[]
  reserva                                           reserva[]
  avaliacao_usuario_avaliacao_idToavaliacao         avaliacao?                      @relation("usuario_avaliacao_idToavaliacao", fields: [avaliacao_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_avaliacao")
}

model dados_bancarios {
  id           Int     @id @default(autoincrement())
  id_usuario   Int
  banco        String  @db.VarChar(50)
  agencia      String  @db.VarChar(50)
  numero_conta String  @db.VarChar(20)
  tipo_conta   String  @db.VarChar(15)
  chave_pix    String? @db.VarChar(50)
  usuario      usuario @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario")
}

model lista_favoritos_personalizada {
  id         Int       @id @default(autoincrement())
  id_usuario Int?
  id_anuncio Int?
  nome       String?   @db.VarChar(20)
  criado_em  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  anuncio    anuncio?  @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_anuncio")
  usuario    usuario?  @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario")
}

model reserva {
  id               Int               @id @default(autoincrement())
  id_usuario       Int?
  id_anuncio       Int?
  qtd_adultos      Int?
  qtd_criancas     Int?
  qtd_bebes        Int?
  qtd_pets         Int?
  data_inicial     DateTime?         @db.Date
  data_final       DateTime?         @db.Date
  status_reserva   status_reserva?
  status_pagamento status_pagamento?
  multa            Boolean?          @default(false)
  cancelamento     Boolean?          @default(false)
  criado_em        DateTime?         @default(dbgenerated("CURRENT_DATE")) @db.Date
  anuncio          anuncio?          @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_anuncio")
  usuario          usuario?          @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario")
}

enum comodidades {
  Wi_fi               @map("Wi-fi")
  TV
  Cozinha
  M_quina_de_lavar    @map("Máquina de lavar")
  Ar_Condicionado     @map("Ar-Condicionado")
  Estacionamento
  Estacionamento_Pago @map("Estacionamento Pago")
  Espa_o_de_Trabalho  @map("Espaço de Trabalho")
  Ventilador
}

enum comodidades_especiais {
  Piscina
  Churrasqueira
  Acesso___Praia @map("Acesso à Praia")
  Mesa_de_Bilhar @map("Mesa de Bilhar")
}

enum seguranca {
  Detector_de_fuma_a     @map("Detector de fumaça")
  Extintor_de_inc_ndio   @map("Extintor de incêndio")
  Kit_primeiros_socorros @map("Kit primeiros socorros")
  Alarme_de_carbono      @map("Alarme de carbono")
}

enum status_pagamento {
  Conclu_do  @map("Concluído")
  Aguardando
}

enum status_reserva {
  Reservado
  Processando
}

enum tipo_espaco {
  Espaco_Inteiro       @map("Espaco Inteiro")
  Quarto_Privativo     @map("Quarto Privativo")
  Quarto_Compartilhado @map("Quarto Compartilhado")
}

enum tipo_hospede {
  Adulto
  Crian_a @map("Criança")
  Beb_    @map("Bebê")
}

enum tipo_imovel {
  Casa
  Apartamento
  Cabana
  Cont_iner        @map("Contêiner")
  Fazenda
  Casa_ecol_gica   @map("Casa ecológica")
  Casa_de_h_spedes @map("Casa de hóspedes")
  Casa_de__rvore   @map("Casa de Árvore")
  Tenda
}

enum tipo_reserva {
  Instant_nea     @map("Instantânea")
  N_o_instant_nea @map("Não instantânea")
}
