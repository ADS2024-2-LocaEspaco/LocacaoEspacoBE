generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:aluno@localhost:3306/stayeasy"
}

model anuncio {
  id                      Int                  @id
  usuario_id              Int
  tipo_espaco_id          Int
  tipo_imoveis_id         Int
  titulo                  String               @db.VarChar(40)
  descricao               String               @db.VarChar(500)
  quant_quartos           BigInt
  quant_banheiro          BigInt
  quant_cama              BigInt
  quant_hospede           BigInt
  url_imgs                String               @db.VarChar(500)
  cftv                    Boolean?             @default(false)
  monitoramento_ruido     Boolean?             @default(false)
  armas                   Boolean?             @default(false)
  aprovacao_reserva       Boolean?             @default(false)
  aceita_crianca          Boolean?             @default(false)
  aceita_bebe             Boolean?             @default(false)
  aceita_pet              Boolean?             @default(false)
  quant_pet               BigInt?              @default(0)
  valor_diaria            String               @db.VarChar(255)
  quant_diaria_min        BigInt?              @default(1)
  quant_diaria_max        BigInt?              @default(1)
  permite_eventos         Boolean?             @default(false)
  permite_fumar           Boolean?             @default(false)
  horario_silencio        Boolean?             @default(false)
  horario_silencio_inicio DateTime?            @db.Time(6)
  horario_silencio_fim    DateTime?            @db.Time(6)
  fotografia_comercial    Boolean?             @default(false)
  checkin_inicio          DateTime             @db.Time(6)
  checkin_fim             DateTime?            @db.Time(6)
  checkout                DateTime             @db.Time(6)
  polit_cancelamento      BigInt
  regras_adicionais       String?              @db.VarChar(500)
  criado_em               DateTime?            @default(now()) //@db.Timestamptz(6)
  publicado               Boolean?             @default(false)
  temp_antec_reserva      BigInt?
  usuario                 usuario              @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "anuncio_fk1")
  tipo_espaco             tipo_espaco          @relation(fields: [tipo_espaco_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "anuncio_fk2")
  tipo_imoveis            tipo_imoveis         @relation(fields: [tipo_imoveis_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "anuncio_fk3")
  comodidade_anuncio      comodidade_anuncio[]
  endereco                endereco[]
  favoritos               favoritos[]
  reservas                reservas[]
}

model avaliacao {
  id                    Int       @id @default(autoincrement())
  reservas_id           Int
  avaliado              BigInt
  nota_limpeza          String?   @db.VarChar(255)
  nota_exatidao_anuncio String?   @db.VarChar(255)
  nota_custo_beneficio  String?   @db.VarChar(255)
  nota_localizacao      String?   @db.VarChar(255)
  comentario            String    @db.VarChar(350)
  nota_seguiu_regras    String?   @db.VarChar(255)
  nota_pontualidade     String?   @db.VarChar(255)
  nota_cordialidade     String?   @db.VarChar(255)
  criado_em             DateTime? @default(now()) @db.Timestamp(6)
  reservas              reservas  @relation(fields: [reservas_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "avaliacao_fk1")
}

model categorias_comodidade {
  id          Int           @id @default(autoincrement())
  tipo        String        @unique(map: "tipo_cat_comod") @db.VarChar(100)
  comodidades comodidades[]
}

model comodidade_anuncio {
  id             Int         @id @default(autoincrement())
  comodidades_id Int
  anuncio_id     Int
  comodidades    comodidades @relation(fields: [comodidades_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comodidade_anuncio_fk1")
  anuncio        anuncio     @relation(fields: [anuncio_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comodidade_anuncio_fk2")
}

model comodidades {
  id                       Int                   @id @default(autoincrement())
  categorias_comodidade_id Int
  nome                     String                @db.VarChar(100)
  icone                    String?               @db.VarChar(500)
  comodidade_anuncio       comodidade_anuncio[]
  categorias_comodidade    categorias_comodidade @relation(fields: [categorias_comodidade_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comodidades_fk1")
}

model endereco {
  id          Int      @id @default(autoincrement())
  anuncio_id  Int
  usuario_id  Int
  logradouro  String   @db.VarChar(255)
  bairro      String   @db.VarChar(255)
  cidade      String   @db.VarChar(255)
  estado      String   @db.VarChar(2)
  numero      String   @db.VarChar(10)
  complemento String?  @db.VarChar(255)
  cep         String   @db.VarChar(10)
  longitude   String?  @db.VarChar(50)
  latitude    String?  @db.VarChar(50)
  criado_em   DateTime @default(now()) @db.Timestamp(6)
  anuncio     anuncio  @relation(fields: [anuncio_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "endereco_fk1")
  usuario     usuario  @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "endereco_fk2")
}

model favoritos {
  id                 Int             @id @default(autoincrement())
  lista_favoritos_id Int
  anuncio_id         Int
  criado_em          DateTime?       @default(now()) @db.Timestamp(6)
  lista_favoritos    lista_favoritos @relation(fields: [lista_favoritos_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favoritos_fk1")
  anuncio            anuncio         @relation(fields: [anuncio_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favoritos_fk2")
}

model instituicao_financeira {
  id                 Int       @id @default(autoincrement())
  codigo_instituicao BigInt    @unique(map: "codigo")
  nome_instituicao   String    @unique(map: "instituicao") @db.VarChar(150)
  usuario            usuario[]
}

model lista_favoritos {
  id         Int         @id @default(autoincrement())
  usuario_id Int
  nome_lista String      @db.VarChar(120)
  criado_em  DateTime?   @default(now()) @db.Timestamp(6)
  favoritos  favoritos[]
  usuario    usuario     @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lista_favoritos_fk1")
}

model reservas {
  id                       Int         @id @default(autoincrement())
  anuncio_id               Int
  usuario_id               Int
  data_inicial             DateTime    @db.Date
  data_final               DateTime    @db.Date
  num_adultos              BigInt?
  num_criancas             BigInt?
  num_bebes                BigInt?
  num_pets                 BigInt?
  valor_reserva            String      @db.VarChar(255)
  num_cartao               String      @db.VarChar(16)
  checkin                  DateTime?   //@db.Timestamptz(6)
  checkout                 DateTime?   //@db.Timestamptz(6)
  status_reserva           BigInt?
  status_pagamento         BigInt?
  multa                    Boolean?
  cancelamento             Boolean?
  solicitante_cancelamento String?     @db.VarChar(25)
  criado_em                DateTime    @default(now()) @db.Timestamp(6)
  avaliacao                avaliacao[]
  anuncio                  anuncio     @relation(fields: [anuncio_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservas_fk1")
  usuario                  usuario     @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservas_fk2")
  url      = "mysql://root:aluno@localhost:3306/locacao-espaco"
}

model anuncio {
  id             String     @id
  title          String     @db.VarChar(40)
  address        String     @db.VarChar(100)
  description    String     @db.VarChar(200)
  userId         String
  tipoImovelId   String
  tipoEspacoId   String
  qtdMaxHospedes Int
  tipoespaco     tipoespaco @relation(fields: [tipoEspacoId], references: [id], map: "Anuncio_tipoEspacoId_fkey")
  tipoimovel     tipoimovel @relation(fields: [tipoImovelId], references: [id], map: "Anuncio_tipoImovelId_fkey")
  user           user       @relation(fields: [userId], references: [id], map: "Anuncio_userId_fkey")

  @@index([tipoEspacoId], map: "Anuncio_tipoEspacoId_fkey")
  @@index([tipoImovelId], map: "Anuncio_tipoImovelId_fkey")
  @@index([userId], map: "Anuncio_userId_fkey")
}

model tipo_espaco {
  id      Int       @id @default(autoincrement())
  tipo    String    @unique(map: "tipo_espaco_un") @db.VarChar(100)
  anuncio anuncio[]

model role {
  id        Int    @id @default(autoincrement())
  descricao String @db.VarChar(30)
  user      user[]
}

model tipoespaco {
  id        String    @id
  descricao String    @db.VarChar(30)
  anuncio   anuncio[]
}

model tipo_imoveis {
  id      Int       @id @default(autoincrement())
  tipo    String    @unique(map: "tipo_imovel") @db.VarChar(100)
  anuncio anuncio[]
model tipoimovel {
  id        String    @id
  descricao String    @db.VarChar(30)
  anuncio   anuncio[]
}

model usuario {
  id                        Int                     @id @default(autoincrement())
  instituicao_financeira_id Int?
  nome                      String                  @db.VarChar(100)
  img                       String                  @db.VarChar(500)
  nome_completo             String                  @db.VarChar(250)
  email                     String                  @unique(map: "email_unq") @db.VarChar(250)
  fone                      BigInt?
  cpf                       String?                 @db.VarChar(14)
  ag                        BigInt?
  cc                        String?                 @db.VarChar(12)
  admin                     Boolean?                @default(false)
  criado_em                 DateTime?               @default(now()) //@db.Timestamptz(6)
  ativo                     Boolean?                @default(true)
  url_documento             String?                 @db.VarChar(500)
  bloqueado                 Boolean?                @default(false)
  token_acesso              String                  @db.VarChar(255)
  anuncio                   anuncio[]
  endereco                  endereco[]
  lista_favoritos           lista_favoritos[]
  reservas                  reservas[]
  instituicao_financeira    instituicao_financeira? @relation(fields: [instituicao_financeira_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "usuario_fk1")
model user {
  id                 String               @id
  username           String               @db.VarChar(30)
  fullname           String               @db.VarChar(50)
  email              String               @unique(map: "email_UNIQUE") @db.VarChar(200)
  cpf                String               @db.VarChar(11)
  phone              String               @db.VarChar(11)
  address            String               @db.VarChar(100)
  state              String               @db.VarChar(2)
  city               String               @db.VarChar(50)
  cep                String               @db.VarChar(8)
  photo              String               @db.VarChar(255)
  roleId             Int
  anuncio            anuncio[]
  role               role                 @relation(fields: [roleId], references: [id], map: "User_roleId_fkey")
  userclassification userclassification[]

  @@index([roleId], map: "User_roleId_fkey")
}

model userclassification {
  id             String @id
  idUser         String
  classification Float  @db.Float
  user           user   @relation(fields: [idUser], references: [id], map: "User_idUser_fkey")

  @@index([idUser], map: "User_idUser_fkey")
}
