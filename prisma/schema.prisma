generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:aluno@localhost:3306/stayeasy"
}

model User {
  id            String @id @default(uuid())
  bank_id       Int?
  email         String @unique(map: "email_UNIQUE") @db.VarChar(250)
  firstName     String @db.VarChar(100)
  lastName      String @db.VarChar(250)
  picture       String @db.VarChar(1024)
  accessToken   String @db.VarChar(255)
  cpf           String? @db.VarChar(14)
  phone         String? @db.VarChar(11)
  agency        Int? 
  account       String? @db.VarChar(12)
  admin         Boolean @default(false)
  created_at    DateTime @default(now())
  active        Boolean @default(true)
  role_id           Int     @default(1)
  url_document  String? @db.VarChar(500)
  blocked       Boolean @default(false)

  role          Role @relation(fields: [role_id], references: [id])
  bank          Bank? @relation(fields: [bank_id], references: [id])

  favorites_list    Favorites_list[]
  address Address[]
}

model Bank {
  id            Int    @id  @default(autoincrement())
  bankCode      Int
  name          String @db.VarChar(100)
  user          User[]
}

model Address {
  id          Int @id @default(autoincrement())
  anuncio_id  String
  usuario_id  String
  logradouro  String    @db.VarChar(255)
  bairro      String    @db.VarChar(255)
  cidade      String    @db.VarChar(255)
  estado      String    @db.VarChar(2)
  numero      String    @db.VarChar(10)
  complemento String    @db.VarChar(255)
  cep         String    @db.VarChar(10)
  longitude   String    @db.VarChar(100)
  latitude    String    @db.VarChar(100)
  criado_em   DateTime  @default(now())

  anuncio     Anuncio @relation(fields: [anuncio_id], references: [id])
  user        User    @relation(fields: [usuario_id], references: [id])
}

model Favorites_list {
  id           Int        @id  @default(autoincrement())
  user_id      String     @db.VarChar(255)
  list_name    String     @db.VarChar(120)
  created_at   DateTime   @default(now())

  user         User @relation(fields: [user_id], references: [id])
}
model Role {
  id        Int @id @default(autoincrement())
  descricao String @db.VarChar(30)
  user      User[]
  createdAt   DateTime @default(now())
}

model Anuncio {
  id             String @id @default(uuid())
  title          String @db.VarChar(40)
  street         String @db.VarChar(100)
  bairro         String @db.VarChar(100)
  cidade         String @db.VarChar(100)
  cep            String @db.VarChar(100)
  numero         Int
  complement     String? @db.VarChar(100)
  latitude   Float?  // Campo opcional para latitude
  longitude  Float?
  description    String @db.VarChar(500)
  userId         String
  tipoImovelId   String
  tipoEspacoId   String
  qtdMaxHospedes Int  
  qtdAvaliacoes  Int  @default(0)
  mediaAvaliacao Int  @default(0)
  createdAt      DateTime @default(now())

  tipoespaco     TipoEspaco @relation(fields: [tipoEspacoId], references: [id], map: "Anuncio_tipoEspacoId_fkey")
  tipoimovel     TipoImovel @relation(fields: [tipoImovelId], references: [id], map: "Anuncio_tipoImovelId_fkey")
  //user           User       @relation(fields: [userId], references: [id], map: "Anuncio_userId_fkey")
  
  feedback       Feedback[]
  reserva        Reserva[]
  address        Address[]
  
  @@index([tipoEspacoId], map: "Anuncio_tipoEspacoId_fkey")
  @@index([tipoImovelId], map: "Anuncio_tipoImovelId_fkey")
  @@index([userId], map: "Anuncio_userId_fkey")
}









































model Reserva {
  id             String @id @default(uuid())
  userId         String
  anuncioId      String
  status         Int
  data_entrada   DateTime
  data_saida     DateTime
  createdAt      DateTime @default(now()) 

  //user           User @relation(fields: [userId], references: [id])
  anuncio     Anuncio @relation(fields: [anuncioId], references: [id])
}



model TipoImovel {
  id        String    @id
  descricao String    @db.VarChar(30)
  anuncio   Anuncio[]
  createdAt   DateTime @default(now())
  
}

model TipoEspaco {
  id        String @id @default(uuid())
  descricao String @db.VarChar(30)
  anuncio   Anuncio[]
  createdAt   DateTime @default(now())
}

model Feedback {
  id        String @id @default(uuid())
  descricao String @db.VarChar(30)
  nota      Int
  anuncioId String
  userId    String
  createdAt   DateTime @default(now())

  //user      User @relation(fields: [userId], references: [id])
  anuncio    Anuncio @relation(fields: [anuncioId], references: [id])
}
model Classification {
  id      Int @id @default(autoincrement())
  userId  String
  grade   Int

  //user    User @relation(fields: [userId], references: [id])
}
