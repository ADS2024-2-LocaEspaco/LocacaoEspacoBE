generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  username    String @db.VarChar(30)
  fullname    String? @db.VarChar(50)
  email       String? @unique(map: "email_UNIQUE") @db.VarChar(200)
  cpf         String? @db.VarChar(11)
  phone       String? @db.VarChar(11)
  address     String? @db.VarChar(100)
  state       String? @db.VarChar(2)
  city        String? @db.VarChar(50)
  cep         String? @db.VarChar(8)
  photo       String? @db.VarChar(255)
  roleId      Int?
  anuncio     Anuncio[]
  classification  Classification[]

  role    Role? @relation(fields: [roleId], references: [id])
}

model Role {
  id        Int @id @default(autoincrement())
  descricao String @db.VarChar(30)
  user      User[]
}

model Anuncio {
  id             String @id @default(uuid())
  title          String @db.VarChar(40)
  address        String @db.VarChar(100)
  description    String @db.VarChar(200)
  userId         String
  tipoImovelId   String
  tipoEspacoId   String
  qtdMaxHospedes Int
  tipoespaco     TipoEspaco @relation(fields: [tipoEspacoId], references: [id], map: "Anuncio_tipoEspacoId_fkey")
  tipoimovel     TipoImovel @relation(fields: [tipoImovelId], references: [id], map: "Anuncio_tipoImovelId_fkey")
  user           User       @relation(fields: [userId], references: [id], map: "Anuncio_userId_fkey")

  @@index([tipoEspacoId], map: "Anuncio_tipoEspacoId_fkey")
  @@index([tipoImovelId], map: "Anuncio_tipoImovelId_fkey")
  @@index([userId], map: "Anuncio_userId_fkey")
}

model TipoEspaco {
  id        String    @id
  descricao String    @db.VarChar(30)
  anuncio   Anuncio[]
}

model TipoImovel {
  id        String    @id
  descricao String    @db.VarChar(30)
  anuncio   Anuncio[]
}

model Classification {
  id      Int @id @default(autoincrement())
  userId  String
  grade   Int

  user    User @relation(fields: [userId], references: [id])
}

model Property {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  description   String?  @db.Text
  propertyType  String   @db.VarChar(50)
  spaceType     String   @db.VarChar(50)
  rooms         Int      @db.Int // Número de quartos
  bathrooms     Int      @db.Int // Número de banheiros
  beds          Int      @db.Int // Número de camas
  guests        Int      @db.Int // Número de hóspedes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  address     Address[]
  propertyAmenities     PropertyAmenities[]

  @@map("properties")
}

model Address {
  id         Int      @id @default(autoincrement())
  propertyId Int
  street     String   @db.VarChar(100)
  number     String   @db.VarChar(10)
  district   String   @db.VarChar(50)
  city       String   @db.VarChar(50)
  state      String   @db.VarChar(2)
  zipCode    String   @db.VarChar(8)
  complement String?  @db.VarChar(50)

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("addresses")
}

model PropertyAmenities {
  id         Int      @id @default(autoincrement())
  propertyId Int
  hasWifi    Boolean  @default(false) // Internet
  hasTV      Boolean  @default(false) // Televisão
  hasKitchen Boolean  @default(false) // Cozinha
  hasWashingMachine  Boolean @default(false) // Máquina de lavar
  hasAirConditioning Boolean @default(false) // Ar condicionado
  hasParking Boolean  @default(false) // Estacionamento
  hasPaidParking Boolean  @default(false) // Estacionamento pago
  hasWorkstation Boolean  @default(false) // Estação de trabalho
  hasFan  Boolean  @default(false) // Ventilador
  hasPool Boolean  @default(false) // Piscina
  hasBarbecueGrill Boolean @default(false) // Churrasqueira
  hasBeachAccess   Boolean @default(false) // Acesso à praia
  hasPoolTable     Boolean @default(false) // Mesa de bilhar
  hasSmokeDetector Boolean @default(false) // Detector de fumaça
  hasFireExtinguisher Boolean @default(false) // Extintor de incêndio
  hasFirstAidKit   Boolean @default(false) // Kit de primeiros socorros
  hasCarbonAlarm   Boolean @default(false) // Alarme de carbono

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("property_amenities")
}
